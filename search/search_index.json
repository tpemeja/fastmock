{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>     FastMock framework, mock your FastAPI APIs </p> <p> </p> <p>Documentation: https://tpemeja.github.io/fastmock</p> <p>Source Code: https://github.com/tpemeja/fastmock</p> <p>FastMock is a Python framework designed to mock FastAPI APIs based on response models.</p> <p>Key features of this project include:</p> <ul> <li>Ease of Use: Simply add the middleware to start mocking your APIs.</li> <li>Flexibility: Mocking can be customized through various parameters, such as activation, data generation, length, status codes, and more.</li> <li>Modularity: The package includes default functions to retrieve mocking parameters from API declarations to request headers. However, all these functions can be modified, allowing you to create your own custom functions.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>This package is build to be used with FastAPI, please learn on to use it on their well documented website - FastAPI Documentation</p> <p>To mock an API, you need to describe the API using FastAPI's decorator key <code>responses</code>. </p> <p>For example: <pre><code>@app.get(\"/\",\n         status_code=status.HTTP_200_OK,\n         responses={\n             status.HTTP_200_OK: {\"model\": list[int]},\n             status.HTTP_404_NOT_FOUND: {\"model\": str}\n         })\n</code></pre></p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastmock\n\n---&gt; 100%\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#create-it","title":"Create it","text":"<ul> <li> <p>Create a file <code>main.py</code> with: <pre><code>from fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\nfrom fastmock.decorator import FastMockDecorator\nfrom fastmock.middleware import FastMockMiddleware\n\napp = FastAPI()\napp.add_middleware(FastMockMiddleware)\n\n\nmock = FastMockDecorator()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool | None = None\n\n\n@app.get(\"/\",\n         status_code=status.HTTP_200_OK,\n         responses={\n             status.HTTP_200_OK: {\"model\": dict[str, str]}\n         })\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@mock(element_size=3)\n@app.get(\"/items\",\n         status_code=status.HTTP_200_OK,\n         responses={\n             status.HTTP_200_OK: {\"model\": list[Item]}\n         })\ndef read_items():\n    return []\n</code></pre></p> </li> <li> <p>Start the server with <code>uvicorn main:app</code> </p> </li> </ul>"},{"location":"#check-it","title":"Check it","text":"<p>Open your browser at http://127.0.0.1:8000/items.</p> <p>You will see the JSON response as:</p> <pre><code>[\n  {\n    \"name\": \"fuquvERvYTfWVEbYRKgi\",\n    \"price\": 18164954265977.8,\n    \"is_offer\": null\n  },\n  {\n    \"name\": \"akMCejCxOhMjgGMPMrcb\",\n    \"price\": 40.3130726635657,\n    \"is_offer\": null\n  },\n  {\n    \"name\": \"uEONHBXGCirPDrLJKgXu\",\n    \"price\": -9.23356705084994,\n    \"is_offer\": null\n  }\n]\n</code></pre> <p>You just created an API using FastAPI that:</p> <ul> <li>Return value generated from defined response model</li> <li>Modify output list size using decorator</li> </ul>"},{"location":"#inspiration","title":"Inspiration","text":"<ul> <li>A project idea that came from my use of FastAPI by tiangolo, the GitHub project inspired me for the structure and documentation of this project.</li> <li>Ideas and code for data generation with Faker inspired by NiyazNz in the fastapi-mock-middleware project.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"middleware/","title":"Mock Data Middleware","text":""},{"location":"middleware/#overview","title":"Overview","text":"<p>The Mock Data Middleware allows you to easily configure and manage mock responses for your FastAPI application. This document provides a comprehensive guide on how to use decorators to specify mocking behavior for your APIs.</p>"},{"location":"middleware/#decorator-usage","title":"Decorator Usage","text":"<p>You can use the decorator to describe the mocking behavior for specific APIs. The default parameters will be derived from the <code>FastMockDecorator</code> declaration using <code>@mock</code> or <code>@mock()</code>. However, you can also specify parameter values for each API individually.</p> <p>To utilize the decorator, initialize it and apply it to your API endpoint as shown in the following example:</p> <pre><code>from fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\nfrom fastmock.decorator import FastMockDecorator\nfrom fastmock.middleware import FastMockMiddleware\n\napp = FastAPI()\napp.add_middleware(FastMockMiddleware)\n\nmock = FastMockDecorator()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool | None = None\n\n@mock(element_size=3)\n@app.get(\"/items\",\n         status_code=status.HTTP_200_OK,\n         responses={\n             status.HTTP_200_OK: {\"model\": list[Item]}\n         })\ndef read_items():\n    return []\n</code></pre> <p>In the code above, the decorator <code>@mock(element_size=3)</code> overrides the default middleware parameters, setting the element size of the API output to 3.</p>"},{"location":"middleware/#request-header","title":"Request Header","text":"<p>You can override the default middleware parameters using request headers. Each parameter can be overridden by using the <code>X-FASTMOCK-&lt;PARAMETER&gt;</code> format. For example, to set the element size of the API output to 3, you can send the header <code>X-FASTMOCK-ELEMENT-SIZE: 3</code> as shown below: <pre><code>curl -H \"X-FASTMOCK-ELEMENT-SIZE: 3\" http://127.0.0.1:8000/items\n</code></pre></p>"},{"location":"middleware/#data-retrieval-order","title":"Data Retrieval Order","text":"<p>During middleware initialization, you can provide custom functions to override the default data retrieval functions or their order with the attribute <code>retrieve_data_function_list</code>. The default order of operations is as follows, with each step potentially overriding the data from the previous step if parameters are defined:</p> <ol> <li>Middleware initialization</li> <li>Decorator initialization</li> <li>API Decorator</li> <li>Header request</li> </ol> <p>This structure ensures that headers can dynamically adjust the behavior of the middleware on a per-request basis.</p>"},{"location":"mock-data/","title":"Mock Data Configuration","text":""},{"location":"mock-data/#overview","title":"Overview","text":"<p>This documentation describes the configuration options available for defining mock data in your application. The configuration is defined using the <code>MockData</code> model, which allows you to specify various parameters for generating mock responses.</p>"},{"location":"mock-data/#enumeration-generationtypeenum","title":"Enumeration: GenerationTypeEnum","text":"<p>The <code>GenerationTypeEnum</code> is an enumeration that specifies the type of generation for mock data. It includes the following options:</p> <ul> <li>default: Represents default data.</li> <li>example: Represents example data.</li> <li>generated: Represents data generated dynamically.</li> </ul> <pre><code>class GenerationTypeEnum(str, Enum):\n    \"\"\"\n    Enumeration for the type of generation for mock data.\n\n    Attributes:\n        default (str): Represents default data.\n        example (str): Represents example data.\n        generated (str): Represents data generated dynamically.\n    \"\"\"\n    default = 'default'\n    example = 'example'\n    generated = 'generated'\n</code></pre>"},{"location":"mock-data/#model-mockdata","title":"Model: MockData","text":"<p>The MockData model is used to define the configuration for mock data generation. It includes the following attributes:</p> <ul> <li>activate (bool): Flag to activate or deactivate mock responses. Defaults to <code>True</code>.</li> <li>element_size (int): Number of elements to be included in the mock response. Defaults to <code>2</code>.</li> <li>type (GenerationTypeEnum): The type of data generation. Defaults to <code>GenerationTypeEnum.default</code>.</li> <li>response_status_code (int | None): HTTP status code for the mock response. If None, a default status code is used.</li> </ul> <pre><code>class MockData(BaseModel):\n    \"\"\"\n    Model for defining mock data configurations.\n\n    Attributes:\n        activate (bool): Flag to activate or deactivate mock responses. Defaults to True.\n        element_size (int): Number of elements to be included in the mock response. Defaults to 2.\n        type (GenerationTypeEnum): The type of data generation. Defaults to GenerationTypeEnum.default.\n        response_status_code (int | None): HTTP status code for the mock response. If None, a default status code is used.\n    \"\"\"\n    activate: bool = True\n    element_size: int = 2\n    type: GenerationTypeEnum = GenerationTypeEnum.default\n    response_status_code: int | None = None\n</code></pre>"},{"location":"mock-data/#usage-example","title":"Usage Example","text":"<p>Here is an example of how you can use the MockData model to configure mock data generation: <pre><code>mock_data_config = MockData(\n    activate=True,\n    element_size=5,\n    type=GenerationTypeEnum.generated,\n    response_status_code=200\n)\n\nprint(mock_data_config)\n</code></pre></p> <p>In this example, the mock data generation is activated, five elements will be included in the mock response, the data type is set to generated, and the HTTP response status code is set to 200.</p>"}]}